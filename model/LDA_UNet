#Step 4: Design LDA-UNet model
#lightweighted unet: Replace standard convolution with depthwise separable convolution,
#                    Change the four layer network to three layers
#                    Half the number of channels in Unet
#Dilated convolution: downsampling and upsampling dilated convolution are symmetric[1, 2, 4, 2, 1]

#Attention Mechanism: CBAM follows the convolutional block in each encoding stage and is outputted via an addition operation.

import torch
import torch.nn as nn

#CBAM：
class ChannelAttentionModule(nn.Module):
    def __init__(self, channel, ratio=16):
        super(ChannelAttentionModule, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.max_pool = nn.AdaptiveMaxPool2d(1)

        self.shared_MLP = nn.Sequential(
            nn.Conv2d(channel, channel // ratio, 1, bias=False),
            nn.ReLU(),
            nn.Conv2d(channel // ratio, channel, 1, bias=False)
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avgout = self.shared_MLP(self.avg_pool(x))
        maxout = self.shared_MLP(self.max_pool(x))
        return self.sigmoid(avgout + maxout)
class SpatialAttentionModule(nn.Module):
    def __init__(self):
        super(SpatialAttentionModule, self).__init__()
        self.conv2d = nn.Conv2d(in_channels=2, out_channels=1, kernel_size=7, stride=1, padding=3)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avgout = torch.mean(x, dim=1, keepdim=True)
        maxout, _ = torch.max(x, dim=1, keepdim=True)
        out = torch.cat([avgout, maxout], dim=1)
        out = self.sigmoid(self.conv2d(out))
        return out

class CBAM(nn.Module):
    def __init__(self, channel):
        super(CBAM, self).__init__()
        self.channel_attention = ChannelAttentionModule(channel)
        self.spatial_attention = SpatialAttentionModule()

    def forward(self, x):
        out = self.channel_attention(x) * x
        out = self.spatial_attention(out) * out
        return out

#Depthwise Separable Convolution + Dilated Convolution
class DepthwiseSeparableConv(nn.Module):
    def __init__(self, in_ch, out_ch, kernel_size=3, padding=1, dilation=1,channels_per_seg=128):
        super(DepthwiseSeparableConv, self).__init__()

        if in_ch == 3 and channels_per_seg != 1:
            C = 3
        else:
            C = min(in_ch, channels_per_seg)

        self.conv = nn.Sequential(
            nn.Conv2d(in_channels=in_ch, out_channels=in_ch, kernel_size=kernel_size, padding=padding,dilation=dilation,
                      groups=in_ch // C),
            nn.Conv2d(in_channels=in_ch, out_channels=out_ch, kernel_size=1, padding=0, dilation=1,groups=1)# 1*1的kernel 不采用空洞卷积
        )

    def forward(self, x):
        return self.conv(x)


class conv_block(nn.Module):
    """(convolution => [BN] => ReLU) * 2 + CBAM"""

    def __init__(self, ch_in, ch_out,dilation=1, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = ch_out
        self.double_conv = nn.Sequential(
            #Depthwise Separable Convolution + Dilated Convolution
            DepthwiseSeparableConv(ch_in, mid_channels, kernel_size=3, padding=dilation, dilation=dilation),
            nn.BatchNorm2d(mid_channels),
            nn.ReLU(inplace=True),
            DepthwiseSeparableConv(mid_channels, ch_out, kernel_size=3, padding=dilation, dilation=dilation),
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        out = self.double_conv(x)
        return out

class up_conv(nn.Module):
    def __init__(self, ch_in, ch_out,dilation=1):
        super(up_conv, self).__init__()
        self.up = nn.Sequential(
            nn.Upsample(scale_factor=2),
            nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=1, padding=dilation,dilation=dilation, bias=True),#Dilated Convolution
            nn.BatchNorm2d(ch_out),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        x = self.up(x)
        return x


class U_Net_CBAM(nn.Module):
    def __init__(self, img_ch, output_ch):
        super(U_Net_CBAM, self).__init__()

        self.Maxpool = nn.MaxPool2d(kernel_size=2, stride=2)

        #Downsampling
        self.Conv1 = conv_block(ch_in=img_ch, ch_out=32)  # 32 The number of channels is halved
        self.Conv2 = conv_block(ch_in=32, ch_out=64,dilation=1)
        self.Conv3 = conv_block(ch_in=64, ch_out=128,dilation=2)
        self.Conv4 = conv_block(ch_in=128, ch_out=256,dilation=4)

        self.cbam1 = CBAM(channel=32)
        self.cbam2 = CBAM(channel=64)
        self.cbam3 = CBAM(channel=128)

        #Upsampling
        self.Up4 = up_conv(ch_in=256, ch_out=128,dilation=1)
        self.Up_conv4 = conv_block(ch_in=256, ch_out=128,dilation=2)

        self.Up3 = up_conv(ch_in=128, ch_out=64,dilation=1)
        self.Up_conv3 = conv_block(ch_in=128, ch_out=64,dilation=1)

        self.Up2 = up_conv(ch_in=64, ch_out=32)
        self.Up_conv2 = conv_block(ch_in=64, ch_out=32)

        self.Conv_1x1 = nn.Conv2d(32, output_ch, kernel_size=1, stride=1, padding=0)  # 32

    def forward(self, x):
        # encoding path
        x1 = self.Conv1(x)
        x1 = self.cbam1(x1) + x1 #CBAM and then add it to x1

        x2 = self.Maxpool(x1)
        x2 = self.Conv2(x2)
        x2 = self.cbam2(x2) + x2

        x3 = self.Maxpool(x2)
        x3 = self.Conv3(x3)
        x3 = self.cbam3(x3) + x3

        x4 = self.Maxpool(x3)
        x4 = self.Conv4(x4)


        # decoding + concat path

        d4 = self.Up4(x4)
        d4 = torch.cat((x3, d4), dim=1)
        d4 = self.Up_conv4(d4)

        d3 = self.Up3(d4)
        d3 = torch.cat((x2, d3), dim=1)
        d3 = self.Up_conv3(d3)

        d2 = self.Up2(d3)
        d2 = torch.cat((x1, d2), dim=1)
        d2 = self.Up_conv2(d2)

        d1 = self.Conv_1x1(d2)

        return d1
